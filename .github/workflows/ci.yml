name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: thriveads_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      working-directory: ./thriveads-backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      working-directory: ./thriveads-backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/thriveads_test
        META_ACCESS_TOKEN: test_token
        ENVIRONMENT: testing
      run: |
        pytest test_main.py -v
        
    - name: Run linting
      working-directory: ./thriveads-backend
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: thriveads-client-platform/package-lock.json
        
    - name: Install dependencies
      working-directory: ./thriveads-client-platform
      run: npm ci
      
    - name: Run tests
      working-directory: ./thriveads-client-platform
      run: npm test -- --coverage --watchAll=false
      
    - name: Run linting
      working-directory: ./thriveads-client-platform
      run: npm run lint
      
    - name: Build application
      working-directory: ./thriveads-client-platform
      run: npm run build

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/checkout@v4

    - name: Notify staging deployment
      run: |
        echo "🚀 Staging deployment triggered"
        echo "✅ Tests passed - code is ready for staging"
        echo "📦 Frontend will be automatically deployed to Vercel from develop branch"
        echo "🐍 Backend will be automatically deployed to Railway from develop branch"
        echo "🔍 Monitor deployment status in Vercel and Railway dashboards"

  deploy-production:
    name: Deploy to Production
    needs: [backend-tests, frontend-tests, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Notify production deployment
      run: |
        echo "🚀 Production deployment triggered"
        echo "✅ All tests passed and security scan completed"
        echo "📦 Frontend will be automatically deployed to Vercel from main branch"
        echo "🐍 Backend will be automatically deployed to Railway from main branch"
        echo "🔍 Monitor deployment status in Vercel and Railway dashboards"
        echo "🎉 Production deployment initiated successfully!"
